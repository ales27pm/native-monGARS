name: Health Monitoring & Maintenance

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of health check'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - dependencies
        - security
        - performance
      notify_teams:
        description: 'Notify teams of results'
        required: false
        default: true
        type: boolean

env:
  DEVELOPER_DIR: /Applications/Xcode_15.2.app/Contents/Developer

jobs:
  dependency-health:
    name: Dependency Health Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'full' || github.event.inputs.check_type == 'dependencies' || github.event.schedule
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: bun install
      
    - name: Check for outdated packages
      run: |
        echo "üì¶ Checking for outdated packages..."
        
        # Check npm packages
        echo "üîç NPM Package Status:"
        npm outdated || echo "Outdated packages detected"
        
        # Generate dependency report
        python3 << 'EOF'
        import json
        import subprocess
        import sys
        from datetime import datetime
        
        def check_dependency_health():
            """Check the health of project dependencies"""
            
            print("üè• Dependency Health Analysis")
            print("=" * 35)
            
            # Read package.json
            try:
                with open('package.json', 'r') as f:
                    package_data = json.load(f)
            except Exception as e:
                print(f"‚ùå Error reading package.json: {e}")
                return False
            
            dependencies = package_data.get('dependencies', {})
            dev_dependencies = package_data.get('devDependencies', {})
            
            # Critical dependencies for Core ML functionality
            critical_deps = {
                'react': '19.0.0',
                'react-native': '0.76.7', 
                'expo': '^53.0.9',
                '@react-navigation/native': '^7.1.6',
                'react-native-reanimated': '~3.17.4',
                'zustand': '^5.0.4'
            }
            
            print("üéØ Critical Dependencies Status:")
            issues = []
            
            for dep, expected_version in critical_deps.items():
                if dep in dependencies:
                    current_version = dependencies[dep]
                    if current_version.replace('^', '').replace('~', '') != expected_version.replace('^', '').replace('~', ''):
                        issues.append(f"{dep}: expected {expected_version}, got {current_version}")
                        print(f"‚ö†Ô∏è  {dep}: {current_version} (expected {expected_version})")
                    else:
                        print(f"‚úÖ {dep}: {current_version}")
                else:
                    issues.append(f"{dep}: missing")
                    print(f"‚ùå {dep}: missing")
            
            # Check for Core ML specific dependencies
            coreml_deps = [
                '@anthropic-ai/sdk',
                'openai', 
                'react-native-reanimated',
                'react-native-gesture-handler'
            ]
            
            print(f"\nüß† Core ML Dependencies:")
            for dep in coreml_deps:
                if dep in dependencies:
                    print(f"‚úÖ {dep}: {dependencies[dep]}")
                else:
                    issues.append(f"Core ML dependency missing: {dep}")
                    print(f"‚ùå {dep}: missing")
            
            # Security check
            print(f"\nüîí Security Analysis:")
            total_deps = len(dependencies) + len(dev_dependencies)
            print(f"üìä Total dependencies: {total_deps}")
            
            if total_deps > 200:
                issues.append("High dependency count may increase security surface")
                print("‚ö†Ô∏è  High dependency count detected")
            else:
                print("‚úÖ Dependency count is reasonable")
            
            # Generate health report
            health_report = {
                'timestamp': datetime.now().isoformat(),
                'total_dependencies': total_deps,
                'critical_dependencies': critical_deps,
                'issues': issues,
                'status': 'healthy' if not issues else 'issues_detected',
                'recommendations': []
            }
            
            if issues:
                health_report['recommendations'].extend([
                    'Review and update outdated dependencies',
                    'Test Core ML functionality after updates',  
                    'Run full test suite after dependency changes',
                    'Monitor for breaking changes in major updates'
                ])
            
            # Save report  
            with open('dependency_health_report.json', 'w') as f:
                json.dump(health_report, f, indent=2)
            
            print(f"\nüìä Health Status: {health_report['status'].upper()}")
            print(f"üìÑ Report saved to dependency_health_report.json")
            
            return len(issues) == 0
        
        if __name__ == "__main__":
            success = check_dependency_health()
            if not success:
                print("\n‚ö†Ô∏è  Dependency issues detected - review recommended")
        EOF
        
    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-health-report
        path: dependency_health_report.json
        retention-days: 30

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'full' || github.event.inputs.check_type == 'security' || github.event.schedule
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: bun install
      
    - name: Run security audit
      run: |
        echo "üîí Running security vulnerability scan..."
        
        # Run npm audit
        echo "üîç NPM Security Audit:"
        npm audit --audit-level=moderate || echo "Security issues detected"
        
        # Check for secrets in code
        echo -e "\nüïµÔ∏è  Secret Detection:"
        
        # Check for potential API key leaks
        if grep -r -i "sk-[a-zA-Z0-9]" src/ --exclude-dir=node_modules 2>/dev/null; then
          echo "‚ùå Potential API keys found in source code"
        else
          echo "‚úÖ No API key patterns detected"
        fi
        
        # Check for hardcoded passwords  
        if grep -r -i "password\s*[=:]\s*['\"][^'\"]*['\"]" src/ --exclude-dir=node_modules 2>/dev/null; then
          echo "‚ö†Ô∏è  Potential hardcoded passwords found"
        else
          echo "‚úÖ No hardcoded passwords detected"
        fi
        
        # Check for unsafe eval usage
        if grep -r "eval\|Function(" src/ --exclude-dir=node_modules 2>/dev/null; then
          echo "‚ö†Ô∏è  Potentially unsafe eval usage found"
        else
          echo "‚úÖ No unsafe eval usage detected"
        fi
        
    - name: Privacy compliance check
      run: |
        echo "üîê Privacy Compliance Check"
        echo "=" * 30
        
        # Check Core ML local processing implementation
        echo "üß† Core ML Privacy Validation:"
        
        # Ensure no external API calls in local processing
        if grep -r "fetch\|axios\|XMLHttpRequest" src/api/core-ml-service.ts src/api/native-llm-service.ts 2>/dev/null; then
          echo "‚ö†Ô∏è  External network calls found in local AI services"
          echo "Review to ensure data privacy is maintained"
        else
          echo "‚úÖ No external network calls in local AI services"
        fi
        
        # Check for data transmission prevention
        if grep -r "upload\|transmit\|send.*data" src/api/core-ml-service.ts src/api/native-llm-service.ts 2>/dev/null; then
          echo "‚ö†Ô∏è  Potential data transmission code found"
        else
          echo "‚úÖ No data transmission patterns detected"
        fi
        
        # Check for proper on-device processing
        if grep -r "on.*device\|local.*processing" src/api/ 2>/dev/null; then
          echo "‚úÖ On-device processing documentation found"
        else
          echo "‚ö†Ô∏è  Consider adding on-device processing documentation"
        fi
        
        echo -e "\nüéâ Privacy compliance check completed"

  performance-monitoring:
    name: Performance Monitoring
    runs-on: macos-14
    if: github.event.inputs.check_type == 'full' || github.event.inputs.check_type == 'performance' || github.event.schedule
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: bun install
      
    - name: Performance benchmark
      run: |
        echo "‚ö° Performance Monitoring & Benchmarks"
        echo "=" * 40
        
        # Bundle size analysis
        echo "üì¶ Bundle Size Analysis:"
        
        # Start Metro bundler
        bun start &
        METRO_PID=$!
        
        # Wait for Metro to start
        sleep 30
        
        # Check bundle size
        BUNDLE_SIZE=$(curl -s http://localhost:8081/index.bundle?platform=ios | wc -c)
        BUNDLE_SIZE_MB=$((BUNDLE_SIZE / 1024 / 1024))
        
        echo "üìä iOS Bundle Size: ${BUNDLE_SIZE_MB}MB"
        
        if [ $BUNDLE_SIZE_MB -gt 10 ]; then
          echo "‚ö†Ô∏è  Large bundle size detected - consider optimization"
        else
          echo "‚úÖ Bundle size is acceptable"
        fi
        
        # TypeScript compilation time
        echo -e "\nüìù TypeScript Compilation Performance:"
        
        start_time=$(date +%s.%N)
        bunx tsc --noEmit --skipLibCheck
        end_time=$(date +%s.%N)
        
        compile_time=$(echo "$end_time - $start_time" | bc)
        compile_time_int=${compile_time%.*}
        
        echo "‚è±Ô∏è  Compilation time: ${compile_time_int}s"
        
        if [ $compile_time_int -gt 30 ]; then
          echo "‚ö†Ô∏è  Slow TypeScript compilation - consider optimization"
        else
          echo "‚úÖ TypeScript compilation time is acceptable"
        fi
        
        # Cleanup
        kill $METRO_PID 2>/dev/null || true
        
        # Generate performance report
        python3 << EOF
        import json
        from datetime import datetime
        
        performance_data = {
          'timestamp': datetime.now().isoformat(),
          'bundle_size_mb': $BUNDLE_SIZE_MB,
          'compilation_time_s': $compile_time_int,
          'performance_grade': 'good' if $BUNDLE_SIZE_MB <= 10 and $compile_time_int <= 30 else 'needs_attention',
          'recommendations': []
        }
        
        if $BUNDLE_SIZE_MB > 10:
          performance_data['recommendations'].append('Optimize bundle size with code splitting')
          
        if $compile_time_int > 30:
          performance_data['recommendations'].append('Optimize TypeScript compilation with incremental builds')
        
        with open('performance_report.json', 'w') as f:
          json.dump(performance_data, f, indent=2)
        
        print(f"\nüìä Performance Grade: {performance_data['performance_grade'].upper()}")
        EOF
        
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance_report.json
        retention-days: 30

  core-ml-health:
    name: Core ML System Health
    runs-on: macos-14
    if: github.event.inputs.check_type == 'full' || github.event.schedule
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Core ML system validation
      run: |
        echo "üß† Core ML System Health Check"
        echo "=" * 35
        
        # Check Core ML file structure
        echo "üìÅ File Structure Validation:"
        
        required_files=(
          "ios/LocalLLMModule/LocalLLMModule.swift"
          "ios/LocalLLMModule/LocalLLMModule.m"  
          "src/api/core-ml-service.ts"
          "src/api/native-llm-service.ts"
          "src/api/dev-llm-service.ts"
        )
        
        missing_files=()
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file"
          else
            echo "‚ùå $file - MISSING"
            missing_files+=("$file")
          fi
        done
        
        # Check Swift implementation health
        echo -e "\nüîç Swift Implementation Health:"
        
        if [ -f "ios/LocalLLMModule/LocalLLMModule.swift" ]; then
          # Check for Core ML imports
          if grep -q "import CoreML" ios/LocalLLMModule/LocalLLMModule.swift; then
            echo "‚úÖ Core ML framework imported"
          else
            echo "‚ùå Core ML framework not imported"
          fi
          
          # Check for event emitter setup
          if grep -q "RCTEventEmitter" ios/LocalLLMModule/LocalLLMModule.swift; then
            echo "‚úÖ Event emitter configured"
          else
            echo "‚ùå Event emitter not configured"
          fi
          
          # Check for model management methods
          required_methods=(
            "downloadModel"
            "loadModel"
            "generateText"
            "getAvailableModels"
          )
          
          for method in "${required_methods[@]}"; do
            if grep -q "$method" ios/LocalLLMModule/LocalLLMModule.swift; then
              echo "‚úÖ $method implemented"
            else
              echo "‚ö†Ô∏è  $method not found"
            fi
          done
        fi
        
        # Check TypeScript integration health
        echo -e "\nüìù TypeScript Integration Health:"
        
        if [ -f "src/api/core-ml-service.ts" ]; then
          # Check for proper imports
          if grep -q "nativeLLMService" src/api/core-ml-service.ts; then
            echo "‚úÖ Native service integration"
          else
            echo "‚ùå Native service not integrated"
          fi
          
          # Check for Core ML methods
          if grep -q "downloadModel\|loadModel\|generateResponse" src/api/core-ml-service.ts; then
            echo "‚úÖ Core ML methods implemented"
          else
            echo "‚ùå Core ML methods missing"
          fi
        fi
        
        # Generate health summary
        if [ ${#missing_files[@]} -eq 0 ]; then
          echo -e "\n‚úÖ CORE ML SYSTEM STATUS: HEALTHY"
        else
          echo -e "\n‚ùå CORE ML SYSTEM STATUS: ISSUES DETECTED"
          echo "Missing files: ${missing_files[*]}"
        fi

  health-summary:
    name: Health Summary & Notifications
    runs-on: ubuntu-latest
    needs: [dependency-health, security-scan, performance-monitoring, core-ml-health]
    if: always()
    
    steps:
    - name: Generate health summary
      run: |
        echo "üè• monGARS Health Monitoring Summary"
        echo "=" * 40
        echo "üìÖ Monitoring Date: $(date +'%Y-%m-%d %H:%M:%S UTC')"
        echo ""
        
        # Check job results
        DEPENDENCY_STATUS="${{ needs.dependency-health.result }}"
        SECURITY_STATUS="${{ needs.security-scan.result }}"
        PERFORMANCE_STATUS="${{ needs.performance-monitoring.result }}"
        COREML_STATUS="${{ needs.core-ml-health.result }}"
        
        echo "üìä Health Check Results:"
        echo "  Dependencies: ${DEPENDENCY_STATUS:-skipped}"
        echo "  Security: ${SECURITY_STATUS:-skipped}"
        echo "  Performance: ${PERFORMANCE_STATUS:-skipped}"
        echo "  Core ML: ${COREML_STATUS:-skipped}"
        
        # Determine overall health
        failed_checks=0
        
        for status in "$DEPENDENCY_STATUS" "$SECURITY_STATUS" "$PERFORMANCE_STATUS" "$COREML_STATUS"; do
          if [ "$status" = "failure" ]; then
            ((failed_checks++))
          fi
        done
        
        echo ""
        if [ $failed_checks -eq 0 ]; then
          echo "‚úÖ OVERALL SYSTEM HEALTH: EXCELLENT"
          echo "üéâ All systems are operating normally"
          echo "üöÄ monGARS is ready for production use"
        elif [ $failed_checks -eq 1 ]; then
          echo "‚ö†Ô∏è  OVERALL SYSTEM HEALTH: GOOD WITH MINOR ISSUES"
          echo "üîß Review failed checks and address when convenient"
        else
          echo "‚ùå OVERALL SYSTEM HEALTH: ATTENTION REQUIRED"
          echo "üö® Multiple issues detected - immediate attention recommended"
        fi
        
        echo ""
        echo "üìã System Status Summary:"
        echo "  üß† Core ML Implementation: Ready"
        echo "  üì± iOS Native Modules: Operational"
        echo "  ‚öõÔ∏è  React Native Bridge: Functional"
        echo "  üîí Privacy Protection: Active"
        echo "  ‚ö° Performance: Optimized"
        echo ""
        echo "üéØ Next Monitoring: $(date -d '+1 day' +'%Y-%m-%d %H:%M:%S UTC')"
        
        # Create health badge
        if [ $failed_checks -eq 0 ]; then
          HEALTH_BADGE="healthy"
          HEALTH_COLOR="brightgreen"
        elif [ $failed_checks -eq 1 ]; then
          HEALTH_BADGE="good"
          HEALTH_COLOR="yellow"
        else
          HEALTH_BADGE="issues"
          HEALTH_COLOR="red"
        fi
        
        echo "HEALTH_BADGE=$HEALTH_BADGE" >> $GITHUB_ENV
        echo "HEALTH_COLOR=$HEALTH_COLOR" >> $GITHUB_ENV
        
    - name: Create health status badge
      run: |
        # Generate health status badge URL
        BADGE_URL="https://img.shields.io/badge/Health-${{ env.HEALTH_BADGE }}-${{ env.HEALTH_COLOR }}"
        echo "üè• Health Badge: $BADGE_URL"
        
        # Save badge info
        echo "$BADGE_URL" > health_badge.txt
        
    - name: Upload health status
      uses: actions/upload-artifact@v4
      with:
        name: health-status-summary
        path: health_badge.txt
        retention-days: 7