#!/bin/bash

# =============================================================================\n# Native-monGARS Deployment Monitoring Script\n# =============================================================================\n# This script monitors the deployment process and provides real-time feedback\n# =============================================================================\n\nset -e\n\n# Configuration\nREPO_OWNER=\"ales27pm\"\nREPO_NAME=\"native-monGARS\"\nCHECK_INTERVAL=30  # seconds\nMAX_WAIT_TIME=1800  # 30 minutes\nWORKFLOW_FILE=\"deploy.yml\"\n\n# Colors\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nPURPLE='\\033[0;35m'\nNC='\\033[0m'\n\n# Logging\nlog() {\n    echo -e \"[$(date '+%Y-%m-%d %H:%M:%S')] $1\"\n}\n\ninfo() {\n    log \"${BLUE}ℹ️  $1${NC}\"\n}\n\nsuccess() {\n    log \"${GREEN}✅ $1${NC}\"\n}\n\nwarn() {\n    log \"${YELLOW}⚠️  $1${NC}\"\n}\n\nerror() {\n    log \"${RED}❌ $1${NC}\"\n}\n\n# Check if GitHub CLI is available\ncheck_gh_cli() {\n    if ! command -v gh &> /dev/null; then\n        error \"GitHub CLI (gh) is not installed. Please install it to use this monitoring script.\"\n        echo \"Install instructions: https://cli.github.com/\"\n        exit 1\n    fi\n    \n    # Check if authenticated\n    if ! gh auth status &> /dev/null; then\n        error \"GitHub CLI is not authenticated. Please run 'gh auth login' first.\"\n        exit 1\n    fi\n    \n    success \"GitHub CLI is available and authenticated\"\n}\n\n# Get latest workflow run\nget_latest_run() {\n    gh api \\\n        -H \"Accept: application/vnd.github+json\" \\\n        \"/repos/$REPO_OWNER/$REPO_NAME/actions/workflows/$WORKFLOW_FILE/runs\" \\\n        --jq '.workflow_runs[0]'\n}\n\n# Get specific workflow run\nget_run_by_id() {\n    local run_id=\"$1\"\n    gh api \\\n        -H \"Accept: application/vnd.github+json\" \\\n        \"/repos/$REPO_OWNER/$REPO_NAME/actions/runs/$run_id\"\n}\n\n# Get workflow run jobs\nget_run_jobs() {\n    local run_id=\"$1\"\n    gh api \\\n        -H \"Accept: application/vnd.github+json\" \\\n        \"/repos/$REPO_OWNER/$REPO_NAME/actions/runs/$run_id/jobs\" \\\n        --jq '.jobs'\n}\n\n# Display workflow status\ndisplay_status() {\n    local run_data=\"$1\"\n    \n    local status=$(echo \"$run_data\" | jq -r '.status')\n    local conclusion=$(echo \"$run_data\" | jq -r '.conclusion')\n    local run_id=$(echo \"$run_data\" | jq -r '.id')\n    local run_number=$(echo \"$run_data\" | jq -r '.run_number')\n    local created_at=$(echo \"$run_data\" | jq -r '.created_at')\n    local updated_at=$(echo \"$run_data\" | jq -r '.updated_at')\n    local head_commit=$(echo \"$run_data\" | jq -r '.head_commit.message')\n    local actor=$(echo \"$run_data\" | jq -r '.actor.login')\n    \n    echo -e \"${PURPLE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\"\n    echo -e \"${BLUE}🚀 Native-monGARS Deployment Monitor${NC}\"\n    echo -e \"${PURPLE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\"\n    \n    echo -e \"📋 Run #$run_number (ID: $run_id)\"\n    echo -e \"👤 Actor: $actor\"\n    echo -e \"💬 Commit: ${head_commit:0:50}...\"\n    echo -e \"⏰ Started: $(date -d \"$created_at\" '+%Y-%m-%d %H:%M:%S')\"\n    echo -e \"🔄 Updated: $(date -d \"$updated_at\" '+%Y-%m-%d %H:%M:%S')\"\n    \n    # Status with colors\n    case \"$status\" in\n        \"queued\")\n            echo -e \"📊 Status: ${YELLOW}🕐 QUEUED${NC}\"\n            ;;\n        \"in_progress\")\n            echo -e \"📊 Status: ${BLUE}🔄 IN PROGRESS${NC}\"\n            ;;\n        \"completed\")\n            case \"$conclusion\" in\n                \"success\")\n                    echo -e \"📊 Status: ${GREEN}✅ SUCCESS${NC}\"\n                    ;;\n                \"failure\")\n                    echo -e \"📊 Status: ${RED}❌ FAILURE${NC}\"\n                    ;;\n                \"cancelled\")\n                    echo -e \"📊 Status: ${YELLOW}⏹️  CANCELLED${NC}\"\n                    ;;\n                *)\n                    echo -e \"📊 Status: ${PURPLE}❓ $conclusion${NC}\"\n                    ;;\n            esac\n            ;;\n        *)\n            echo -e \"📊 Status: ${PURPLE}❓ $status${NC}\"\n            ;;\n    esac\n    \n    echo \"\"\n}\n\n# Display job statuses\ndisplay_jobs() {\n    local run_id=\"$1\"\n    local jobs_data=$(get_run_jobs \"$run_id\")\n    \n    echo -e \"${BLUE}📋 Job Status:${NC}\"\n    echo \"\"\n    \n    echo \"$jobs_data\" | jq -r '.[] | \"\\(.name),\\(.status),\\(.conclusion),\\(.started_at),\\(.completed_at)\"' | while IFS=',' read -r name status conclusion started completed; do\n        local duration=\"\"\n        if [[ \"$started\" != \"null\" && \"$completed\" != \"null\" ]]; then\n            local start_epoch=$(date -d \"$started\" +%s)\n            local end_epoch=$(date -d \"$completed\" +%s)\n            local diff=$((end_epoch - start_epoch))\n            duration=\" (${diff}s)\"\n        elif [[ \"$started\" != \"null\" ]]; then\n            local start_epoch=$(date -d \"$started\" +%s)\n            local current_epoch=$(date +%s)\n            local diff=$((current_epoch - start_epoch))\n            duration=\" (${diff}s elapsed)\"\n        fi\n        \n        case \"$status\" in\n            \"queued\")\n                echo -e \"  🕐 $name - ${YELLOW}Queued${NC}$duration\"\n                ;;\n            \"in_progress\")\n                echo -e \"  🔄 $name - ${BLUE}Running${NC}$duration\"\n                ;;\n            \"completed\")\n                case \"$conclusion\" in\n                    \"success\")\n                        echo -e \"  ✅ $name - ${GREEN}Success${NC}$duration\"\n                        ;;\n                    \"failure\")\n                        echo -e \"  ❌ $name - ${RED}Failed${NC}$duration\"\n                        ;;\n                    \"cancelled\")\n                        echo -e \"  ⏹️  $name - ${YELLOW}Cancelled${NC}$duration\"\n                        ;;\n                    \"skipped\")\n                        echo -e \"  ⏭️  $name - ${PURPLE}Skipped${NC}$duration\"\n                        ;;\n                    *)\n                        echo -e \"  ❓ $name - ${PURPLE}$conclusion${NC}$duration\"\n                        ;;\n                esac\n                ;;\n            *)\n                echo -e \"  ❓ $name - ${PURPLE}$status${NC}$duration\"\n                ;;\n        esac\n    done\n    \n    echo \"\"\n}\n\n# Monitor specific run\nmonitor_run() {\n    local run_id=\"$1\"\n    local start_time=$(date +%s)\n    \n    info \"Starting monitoring for run ID: $run_id\"\n    \n    while true; do\n        local current_time=$(date +%s)\n        local elapsed=$((current_time - start_time))\n        \n        # Check timeout\n        if [[ $elapsed -gt $MAX_WAIT_TIME ]]; then\n            warn \"Monitoring timeout reached ($MAX_WAIT_TIME seconds)\"\n            break\n        fi\n        \n        # Clear screen and show status\n        clear\n        \n        local run_data=$(get_run_by_id \"$run_id\")\n        display_status \"$run_data\"\n        display_jobs \"$run_id\"\n        \n        local status=$(echo \"$run_data\" | jq -r '.status')\n        local conclusion=$(echo \"$run_data\" | jq -r '.conclusion')\n        \n        # Check if completed\n        if [[ \"$status\" == \"completed\" ]]; then\n            if [[ \"$conclusion\" == \"success\" ]]; then\n                success \"Deployment completed successfully! 🎉\"\n                \n                # Show final summary\n                echo -e \"${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\"\n                echo -e \"${GREEN}🎉 DEPLOYMENT SUCCESS 🎉${NC}\"\n                echo -e \"${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\"\n                echo \"\"\n                echo \"✅ Native-monGARS has been successfully deployed!\"\n                echo \"📱 UI: Complete with 5 screens and navigation\"\n                echo \"🏗️  Architecture: Production-ready with Swift TurboModules\"\n                echo \"🛡️  Security: Privacy-first design with on-device processing\"\n                echo \"⚡ Performance: Optimized for mobile with proper error handling\"\n                echo \"\"\n                echo \"🔗 Repository: https://github.com/$REPO_OWNER/$REPO_NAME\"\n                echo \"📊 Workflow: https://github.com/$REPO_OWNER/$REPO_NAME/actions/runs/$run_id\"\n                echo \"\"\n                \n            else\n                error \"Deployment failed with conclusion: $conclusion\"\n                \n                # Show failure summary\n                echo -e \"${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\"\n                echo -e \"${RED}❌ DEPLOYMENT FAILED ❌${NC}\"\n                echo -e \"${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\"\n                echo \"\"\n                echo \"🔍 Check the workflow logs for detailed error information:\"\n                echo \"📊 https://github.com/$REPO_OWNER/$REPO_NAME/actions/runs/$run_id\"\n                echo \"\"\n                \n                # Show failed jobs\n                echo -e \"${RED}Failed Jobs:${NC}\"\n                local failed_jobs=$(echo \"$jobs_data\" | jq -r '.[] | select(.conclusion == \"failure\") | .name')\n                echo \"$failed_jobs\" | while read -r job_name; do\n                    echo \"  ❌ $job_name\"\n                done\n                echo \"\"\n            fi\n            break\n        fi\n        \n        echo -e \"${BLUE}🔄 Monitoring... (${elapsed}s elapsed, checking every ${CHECK_INTERVAL}s)${NC}\"\n        echo -e \"${PURPLE}Press Ctrl+C to stop monitoring${NC}\"\n        \n        sleep $CHECK_INTERVAL\n    done\n}\n\n# Monitor latest run\nmonitor_latest() {\n    info \"Fetching latest workflow run...\"\n    \n    local latest_run=$(get_latest_run)\n    local run_id=$(echo \"$latest_run\" | jq -r '.id')\n    \n    if [[ \"$run_id\" == \"null\" || -z \"$run_id\" ]]; then\n        error \"No workflow runs found\"\n        exit 1\n    fi\n    \n    monitor_run \"$run_id\"\n}\n\n# Trigger deployment\ntrigger_deployment() {\n    local environment=\"${1:-staging}\"\n    \n    info \"Triggering deployment to $environment...\"\n    \n    # Trigger workflow dispatch\n    gh workflow run \"$WORKFLOW_FILE\" \\\n        --ref main \\\n        --field environment=\"$environment\" \\\n        --field clear_cache=false \\\n        --field skip_tests=false\n    \n    success \"Deployment triggered!\"\n    \n    # Wait a moment for the run to appear\n    sleep 5\n    \n    # Start monitoring\n    monitor_latest\n}\n\n# Show help\nshow_help() {\n    echo \"Native-monGARS Deployment Monitor\"\n    echo \"\"\n    echo \"Usage: $0 [COMMAND] [OPTIONS]\"\n    echo \"\"\n    echo \"Commands:\"\n    echo \"  monitor [RUN_ID]    Monitor a specific run (or latest if no ID provided)\"\n    echo \"  trigger [ENV]       Trigger deployment (staging/production, default: staging)\"\n    echo \"  status              Show current deployment status\"\n    echo \"  logs [RUN_ID]       Show logs for a specific run\"\n    echo \"  help                Show this help message\"\n    echo \"\"\n    echo \"Options:\"\n    echo \"  --repo OWNER/NAME   Repository to monitor (default: $REPO_OWNER/$REPO_NAME)\"\n    echo \"  --interval SECONDS  Check interval (default: $CHECK_INTERVAL)\"\n    echo \"  --timeout SECONDS   Max wait time (default: $MAX_WAIT_TIME)\"\n    echo \"\"\n    echo \"Examples:\"\n    echo \"  $0 monitor                    # Monitor latest run\"\n    echo \"  $0 monitor 1234567890         # Monitor specific run\"\n    echo \"  $0 trigger production         # Trigger production deployment\"\n    echo \"  $0 status                     # Show current status\"\n}\n\n# Show current status\nshow_status() {\n    info \"Fetching current deployment status...\"\n    \n    local latest_run=$(get_latest_run)\n    display_status \"$latest_run\"\n    \n    local run_id=$(echo \"$latest_run\" | jq -r '.id')\n    display_jobs \"$run_id\"\n}\n\n# Show logs\nshow_logs() {\n    local run_id=\"$1\"\n    \n    if [[ -z \"$run_id\" ]]; then\n        local latest_run=$(get_latest_run)\n        run_id=$(echo \"$latest_run\" | jq -r '.id')\n    fi\n    \n    info \"Fetching logs for run $run_id...\"\n    \n    gh run view \"$run_id\" --log\n}\n\n# Main function\nmain() {\n    # Parse repository option\n    while [[ $# -gt 0 ]]; do\n        case $1 in\n            --repo)\n                IFS='/' read -r REPO_OWNER REPO_NAME <<< \"$2\"\n                shift 2\n                ;;\n            --interval)\n                CHECK_INTERVAL=\"$2\"\n                shift 2\n                ;;\n            --timeout)\n                MAX_WAIT_TIME=\"$2\"\n                shift 2\n                ;;\n            *)\n                break\n                ;;\n        esac\n    done\n    \n    check_gh_cli\n    \n    local command=\"${1:-monitor}\"\n    \n    case \"$command\" in\n        monitor)\n            if [[ -n \"$2\" ]]; then\n                monitor_run \"$2\"\n            else\n                monitor_latest\n            fi\n            ;;\n        trigger)\n            trigger_deployment \"${2:-staging}\"\n            ;;\n        status)\n            show_status\n            ;;\n        logs)\n            show_logs \"$2\"\n            ;;\n        help|--help|-h)\n            show_help\n            ;;\n        *)\n            error \"Unknown command: $command\"\n            show_help\n            exit 1\n            ;;\n    esac\n}\n\n# Handle Ctrl+C\ntrap 'echo -e \"\\n${YELLOW}Monitoring stopped by user${NC}\"; exit 0' INT\n\n# Run main function\nmain \"$@\"\n