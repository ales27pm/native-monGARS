import React, { useState, useRef, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  Pressable,\n  ScrollView,\n  KeyboardAvoidingView,\n  Platform,\n  Alert,\n} from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { Ionicons } from '@expo/vector-icons';\n// import { useAgent } from '../hooks/useAgent';\n\ninterface Message {\n  id: string;\n  text: string;\n  isUser: boolean;\n  timestamp: Date;\n}\n\nexport default function ChatScreen() {\n  // Mock agent functions\n  const isProcessing = false;\n  const error = null;\n  const clearError = () => {};\n  const processInput = async (text: string) => {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    return `I understand you asked: \"${text}\". I'm a privacy-first AI assistant ready to help!`;\n  };\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      text: "Hello! I'm monGARS, your privacy-first AI assistant. I can help you with calendar events, contacts, files, and general questions. What would you like to do?",\n      isUser: false,\n      timestamp: new Date(),\n    },\n  ]);\n  const [inputText, setInputText] = useState('');\n  const scrollViewRef = useRef<ScrollView>(null);\n\n  useEffect(() => {\n    if (error) {\n      Alert.alert('Error', error, [{ text: 'OK', onPress: clearError }]);\n    }\n  }, [error]);\n\n  const sendMessage = async () => {\n    if (!inputText.trim() || isProcessing) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      text: inputText.trim(),\n      isUser: true,\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputText('');\n\n    try {\n      const response = await processInput(userMessage.text);\n      \n      const assistantMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        text: response,\n        isUser: false,\n        timestamp: new Date(),\n      };\n\n      setMessages(prev => [...prev, assistantMessage]);\n    } catch (error) {\n      const errorMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        text: 'Sorry, I encountered an error processing your request. Please try again.',\n        isUser: false,\n        timestamp: new Date(),\n      };\n\n      setMessages(prev => [...prev, errorMessage]);\n    }\n\n    // Scroll to bottom\n    setTimeout(() => {\n      scrollViewRef.current?.scrollToEnd({ animated: true });\n    }, 100);\n  };\n\n  const MessageBubble = ({ message }: { message: Message }) => (\n    <View\n      className={`mb-4 flex-row ${\n        message.isUser ? 'justify-end' : 'justify-start'\n      }`}\n    >\n      <View\n        className={`max-w-[80%] px-4 py-3 rounded-2xl ${\n          message.isUser\n            ? 'bg-blue-500 rounded-br-md'\n            : 'bg-white border border-gray-200 rounded-bl-md'\n        }`}\n      >\n        <Text\n          className={`text-base ${\n            message.isUser ? 'text-white' : 'text-gray-900'\n          }`}\n        >\n          {message.text}\n        </Text>\n        <Text\n          className={`text-xs mt-1 ${\n            message.isUser ? 'text-blue-100' : 'text-gray-500'\n          }`}\n        >\n          {message.timestamp.toLocaleTimeString([], {\n            hour: '2-digit',\n            minute: '2-digit',\n          })}\n        </Text>\n      </View>\n    </View>\n  );\n\n  const QuickActionButton = ({ text, icon }: { text: string; icon: string }) => (\n    <Pressable\n      onPress={() => setInputText(text)}\n      className=\"bg-gray-100 rounded-full px-4 py-2 mr-3 flex-row items-center active:bg-gray-200\"\n    >\n      <Ionicons name={icon as any} size={16} color=\"#6B7280\" />\n      <Text className=\"text-gray-700 ml-2 text-sm\">{text}</Text>\n    </Pressable>\n  );\n\n  return (\n    <SafeAreaView className=\"flex-1 bg-gray-50\">\n      <KeyboardAvoidingView\n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n        className=\"flex-1\"\n      >\n        {/* Header */}\n        <View className=\"px-4 py-3 bg-white border-b border-gray-200\">\n          <Text className=\"text-xl font-bold text-gray-900\">Chat with monGARS</Text>\n          <Text className=\"text-gray-500 text-sm\">\n            {isProcessing ? 'Thinking...' : 'Ready to help'}\n          </Text>\n        </View>\n\n        {/* Messages */}\n        <ScrollView\n          ref={scrollViewRef}\n          className=\"flex-1 px-4 py-4\"\n          showsVerticalScrollIndicator={false}\n        >\n          {messages.map((message) => (\n            <MessageBubble key={message.id} message={message} />\n          ))}\n          \n          {isProcessing && (\n            <View className=\"flex-row justify-start mb-4\">\n              <View className=\"bg-white border border-gray-200 rounded-2xl rounded-bl-md px-4 py-3\">\n                <View className=\"flex-row items-center\">\n                  <View className=\"flex-row space-x-1\">\n                    <View className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse\" />\n                    <View className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse\" style={{animationDelay: '0.2s'}} />\n                    <View className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse\" style={{animationDelay: '0.4s'}} />\n                  </View>\n                  <Text className=\"text-gray-500 text-sm ml-3\">Processing...</Text>\n                </View>\n              </View>\n            </View>\n          )}\n        </ScrollView>\n\n        {/* Quick Actions */}\n        <View className=\"px-4 py-2\">\n          <ScrollView\n            horizontal\n            showsHorizontalScrollIndicator={false}\n            className=\"mb-3\"\n          >\n            <QuickActionButton text=\"What's on my calendar today?\" icon=\"calendar-outline\" />\n            <QuickActionButton text=\"Show my contacts\" icon=\"people-outline\" />\n            <QuickActionButton text=\"Help me organize files\" icon=\"folder-outline\" />\n            <QuickActionButton text=\"What can you do?\" icon=\"help-circle-outline\" />\n          </ScrollView>\n        </View>\n\n        {/* Input */}\n        <View className=\"px-4 pb-4 bg-white border-t border-gray-200\">\n          <View className=\"flex-row items-center bg-gray-100 rounded-full px-4 py-3\">\n            <TextInput\n              value={inputText}\n              onChangeText={setInputText}\n              placeholder=\"Type your message...\"\n              placeholderTextColor=\"#9CA3AF\"\n              className=\"flex-1 text-base text-gray-900\"\n              multiline\n              maxLength={500}\n              editable={!isProcessing}\n              onSubmitEditing={sendMessage}\n            />\n            <Pressable\n              onPress={sendMessage}\n              disabled={!inputText.trim() || isProcessing}\n              className={`ml-3 w-10 h-10 rounded-full items-center justify-center ${\n                inputText.trim() && !isProcessing\n                  ? 'bg-blue-500'\n                  : 'bg-gray-300'\n              }`}\n            >\n              <Ionicons\n                name=\"send\"\n                size={18}\n                color={inputText.trim() && !isProcessing ? 'white' : '#9CA3AF'}\n              />\n            </Pressable>\n          </View>\n        </View>\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n}\n"