import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  Pressable,\n  ScrollView,\n  Alert,\n  Modal,\n  TextInput,\n} from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { Ionicons } from '@expo/vector-icons';\nimport { calendar } from '../services/tools/CalendarService';\nimport { contacts } from '../services/tools/ContactsService';\nimport { fileService } from '../services/tools/FileService';\nimport { useRAG } from '../hooks/useRAG';\n\nexport default function ToolsScreen() {\n  const { indexDocument, search, searchResults, stats } = useRAG();\n  const [showRAGModal, setShowRAGModal] = useState(false);\n  const [ragText, setRAGText] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const ToolCard = ({ title, description, icon, color, onPress, disabled = false }: any) => (\n    <Pressable\n      onPress={onPress}\n      disabled={disabled}\n      className={`bg-white rounded-2xl p-4 shadow-sm border border-gray-100 mb-4 active:scale-95 ${\n        disabled ? 'opacity-50' : ''\n      }`}\n    >\n      <View className=\"flex-row items-center\">\n        <View className={`w-12 h-12 rounded-full ${color} items-center justify-center`}>\n          <Ionicons name={icon} size={24} color=\"white\" />\n        </View>\n        <View className=\"ml-4 flex-1\">\n          <Text className=\"text-gray-900 font-semibold text-lg\">{title}</Text>\n          <Text className=\"text-gray-500 text-sm\">{description}</Text>\n        </View>\n        <Ionicons name=\"chevron-forward\" size={20} color=\"#9CA3AF\" />\n      </View>\n    </Pressable>\n  );\n\n  const handleCalendarAccess = async () => {\n    try {\n      const initialized = await calendar.initialize();\n      if (initialized) {\n        const todayEvents = await calendar.getTodayEvents();\n        Alert.alert(\n          'Calendar Access',\n          `Successfully connected! You have ${todayEvents.length} events today.`,\n          [\n            {\n              text: 'View Events',\n              onPress: () => {\n                if (todayEvents.length > 0) {\n                  const eventList = todayEvents.map(event => \n                    `• ${event.title} at ${event.startDate.toLocaleTimeString()}`\n                  ).join('\\n');\n                  Alert.alert('Today\\'s Events', eventList);\n                } else {\n                  Alert.alert('Today\\'s Events', 'No events scheduled for today.');\n                }\n              }\n            },\n            { text: 'OK' }\n          ]\n        );\n      } else {\n        Alert.alert('Calendar Access', 'Failed to access calendar. Please check permissions.');\n      }\n    } catch (error) {\n      Alert.alert('Error', 'Failed to initialize calendar service.');\n    }\n  };\n\n  const handleContactsAccess = async () => {\n    try {\n      const initialized = await contacts.initialize();\n      if (initialized) {\n        const allContacts = await contacts.getContacts();\n        Alert.alert(\n          'Contacts Access',\n          `Successfully connected! You have ${allContacts.length} contacts.`,\n          [\n            {\n              text: 'Search Contacts',\n              onPress: () => {\n                Alert.prompt(\n                  'Search Contacts',\n                  'Enter a name to search:',\n                  async (searchTerm) => {\n                    if (searchTerm) {\n                      const results = await contacts.searchContacts(searchTerm);\n                      if (results.length > 0) {\n                        const contactList = results.slice(0, 5).map(contact => \n                          `• ${contact.firstName} ${contact.lastName}`\n                        ).join('\\n');\n                        Alert.alert('Search Results', contactList);\n                      } else {\n                        Alert.alert('Search Results', 'No contacts found.');\n                      }\n                    }\n                  }\n                );\n              }\n            },\n            { text: 'OK' }\n          ]\n        );\n      } else {\n        Alert.alert('Contacts Access', 'Failed to access contacts. Please check permissions.');\n      }\n    } catch (error) {\n      Alert.alert('Error', 'Failed to initialize contacts service.');\n    }\n  };\n\n  const handleFileAccess = async () => {\n    try {\n      const initialized = await fileService.initialize();\n      if (initialized) {\n        const docDir = fileService.getDocumentDirectory();\n        const files = await fileService.listFiles(docDir);\n        Alert.alert(\n          'File Access',\n          `Successfully connected! Found ${files.length} files in documents.`,\n          [\n            {\n              text: 'List Files',\n              onPress: () => {\n                if (files.length > 0) {\n                  const fileList = files.slice(0, 5).map(file => \n                    `• ${file.name} (${Math.round(file.size / 1024)}KB)`\n                  ).join('\\n');\n                  Alert.alert('Recent Files', fileList);\n                } else {\n                  Alert.alert('Files', 'No files found in documents directory.');\n                }\n              }\n            },\n            { text: 'OK' }\n          ]\n        );\n      } else {\n        Alert.alert('File Access', 'Failed to access file system.');\n      }\n    } catch (error) {\n      Alert.alert('Error', 'Failed to initialize file service.');\n    }\n  };\n\n  const handleRAGDemo = () => {\n    setShowRAGModal(true);\n  };\n\n  const handleIndexDocument = async () => {\n    if (!ragText.trim()) {\n      Alert.alert('Error', 'Please enter some text to index.');\n      return;\n    }\n\n    try {\n      const success = await indexDocument({\n        id: `doc_${Date.now()}`,\n        content: ragText.trim(),\n        metadata: {\n          source: 'user_input',\n          timestamp: new Date().toISOString()\n        }\n      });\n\n      if (success) {\n        Alert.alert('Success', 'Document indexed successfully!');\n        setRAGText('');\n      } else {\n        Alert.alert('Error', 'Failed to index document.');\n      }\n    } catch (error) {\n      Alert.alert('Error', 'Failed to index document.');\n    }\n  };\n\n  const handleSearchRAG = async () => {\n    if (!searchQuery.trim()) {\n      Alert.alert('Error', 'Please enter a search query.');\n      return;\n    }\n\n    try {\n      await search(searchQuery.trim());\n      // Results will be available in searchResults from useRAG hook\n    } catch (error) {\n      Alert.alert('Error', 'Failed to search documents.');\n    }\n  };\n\n  return (\n    <SafeAreaView className=\"flex-1 bg-gray-50\">\n      <ScrollView className=\"flex-1 px-4\">\n        {/* Header */}\n        <View className=\"pt-6 pb-4\">\n          <Text className=\"text-3xl font-bold text-gray-900\">Tools & Services</Text>\n          <Text className=\"text-gray-500 mt-1\">Access device capabilities and AI features</Text>\n        </View>\n\n        {/* Native Tools */}\n        <View className=\"mb-6\">\n          <Text className=\"text-lg font-semibold text-gray-900 mb-3\">Native Device Access</Text>\n          \n          <ToolCard\n            title=\"Calendar\"\n            description=\"Manage events, view schedule, create appointments\"\n            icon=\"calendar-outline\"\n            color=\"bg-blue-500\"\n            onPress={handleCalendarAccess}\n          />\n          \n          <ToolCard\n            title=\"Contacts\"\n            description=\"Search contacts, manage address book\"\n            icon=\"people-outline\"\n            color=\"bg-green-500\"\n            onPress={handleContactsAccess}\n          />\n          \n          <ToolCard\n            title=\"Files\"\n            description=\"Access documents, manage file system\"\n            icon=\"folder-outline\"\n            color=\"bg-orange-500\"\n            onPress={handleFileAccess}\n          />\n        </View>\n\n        {/* AI Tools */}\n        <View className=\"mb-6\">\n          <Text className=\"text-lg font-semibold text-gray-900 mb-3\">AI-Powered Features</Text>\n          \n          <ToolCard\n            title=\"RAG System\"\n            description=\"Index documents and perform semantic search\"\n            icon=\"search-outline\"\n            color=\"bg-purple-500\"\n            onPress={handleRAGDemo}\n          />\n          \n          <ToolCard\n            title=\"Voice Processing\"\n            description=\"Speech recognition and wake word detection\"\n            icon=\"mic-outline\"\n            color=\"bg-red-500\"\n            onPress={() => Alert.alert('Voice Processing', 'Switch to Voice tab for voice features.')}\n          />\n        </View>\n\n        {/* System Information */}\n        <View className=\"mb-8\">\n          <Text className=\"text-lg font-semibold text-gray-900 mb-3\">System Status</Text>\n          <View className=\"bg-white rounded-2xl p-4 shadow-sm border border-gray-100\">\n            <View className=\"space-y-3\">\n              <View className=\"flex-row justify-between items-center\">\n                <Text className=\"text-gray-600\">Documents Indexed</Text>\n                <Text className=\"text-gray-900 font-semibold\">\n                  {stats?.documentCount || 0}\n                </Text>\n              </View>\n              <View className=\"flex-row justify-between items-center\">\n                <Text className=\"text-gray-600\">Storage Used</Text>\n                <Text className=\"text-gray-900 font-semibold\">\n                  {stats?.totalSize ? `${Math.round(stats.totalSize / 1024)}KB` : '0KB'}\n                </Text>\n              </View>\n              <View className=\"flex-row justify-between items-center\">\n                <Text className=\"text-gray-600\">Privacy Mode</Text>\n                <View className=\"flex-row items-center\">\n                  <View className=\"w-2 h-2 bg-green-500 rounded-full mr-2\" />\n                  <Text className=\"text-green-600 font-semibold\">On-Device</Text>\n                </View>\n              </View>\n            </View>\n          </View>\n        </View>\n      </ScrollView>\n\n      {/* RAG Demo Modal */}\n      <Modal\n        visible={showRAGModal}\n        animationType=\"slide\"\n        presentationStyle=\"pageSheet\"\n      >\n        <SafeAreaView className=\"flex-1 bg-gray-50\">\n          <View className=\"flex-1 px-4\">\n            {/* Header */}\n            <View className=\"flex-row items-center justify-between py-4\">\n              <Text className=\"text-xl font-bold text-gray-900\">RAG System Demo</Text>\n              <Pressable onPress={() => setShowRAGModal(false)}>\n                <Ionicons name=\"close\" size={24} color=\"#6B7280\" />\n              </Pressable>\n            </View>\n\n            <ScrollView className=\"flex-1\">\n              {/* Index Document */}\n              <View className=\"mb-6\">\n                <Text className=\"text-lg font-semibold text-gray-900 mb-3\">Index Document</Text>\n                <View className=\"bg-white rounded-2xl p-4 shadow-sm border border-gray-100\">\n                  <TextInput\n                    value={ragText}\n                    onChangeText={setRAGText}\n                    placeholder=\"Enter text to index (e.g., notes, documents, information)...\"\n                    placeholderTextColor=\"#9CA3AF\"\n                    className=\"text-gray-900 text-base min-h-[100px]\"\n                    multiline\n                    textAlignVertical=\"top\"\n                  />\n                  <Pressable\n                    onPress={handleIndexDocument}\n                    className=\"bg-purple-500 rounded-xl p-3 mt-3 items-center active:bg-purple-600\"\n                  >\n                    <Text className=\"text-white font-semibold\">Index Document</Text>\n                  </Pressable>\n                </View>\n              </View>\n\n              {/* Search */}\n              <View className=\"mb-6\">\n                <Text className=\"text-lg font-semibold text-gray-900 mb-3\">Search Documents</Text>\n                <View className=\"bg-white rounded-2xl p-4 shadow-sm border border-gray-100\">\n                  <TextInput\n                    value={searchQuery}\n                    onChangeText={setSearchQuery}\n                    placeholder=\"Enter search query...\"\n                    placeholderTextColor=\"#9CA3AF\"\n                    className=\"text-gray-900 text-base mb-3\"\n                  />\n                  <Pressable\n                    onPress={handleSearchRAG}\n                    className=\"bg-blue-500 rounded-xl p-3 items-center active:bg-blue-600\"\n                  >\n                    <Text className=\"text-white font-semibold\">Search</Text>\n                  </Pressable>\n                </View>\n              </View>\n\n              {/* Search Results */}\n              {searchResults.length > 0 && (\n                <View className=\"mb-6\">\n                  <Text className=\"text-lg font-semibold text-gray-900 mb-3\">Search Results</Text>\n                  {searchResults.map((result, index) => (\n                    <View key={result.id} className=\"bg-white rounded-2xl p-4 shadow-sm border border-gray-100 mb-3\">\n                      <View className=\"flex-row justify-between items-start mb-2\">\n                        <Text className=\"text-gray-600 text-sm\">Document {index + 1}</Text>\n                        <Text className=\"text-blue-500 text-sm font-medium\">\n                          {Math.round(result.score * 100)}% match\n                        </Text>\n                      </View>\n                      <Text className=\"text-gray-900\">{result.content}</Text>\n                    </View>\n                  ))}\n                </View>\n              )}\n\n              {/* Instructions */}\n              <View className=\"mb-6\">\n                <Text className=\"text-lg font-semibold text-gray-900 mb-3\">How it Works</Text>\n                <View className=\"bg-blue-50 rounded-2xl p-4 border border-blue-100\">\n                  <Text className=\"text-blue-900 text-sm leading-relaxed\">\n                    The RAG (Retrieval-Augmented Generation) system allows you to index documents and perform semantic search. \n                    {\"\\n\\n\"}\n                    1. Index documents by entering text above{\"\\n\"}\n                    2. Search using natural language queries{\"\\n\"}\n                    3. Results are ranked by semantic similarity{\"\\n\"}\n                    4. All processing happens on-device for privacy\n                  </Text>\n                </View>\n              </View>\n            </ScrollView>\n          </View>\n        </SafeAreaView>\n      </Modal>\n    </SafeAreaView>\n  );\n}\n"