// Mock Calendar Service for template environment\n// In production, this would use the actual native module\n\ninterface CalendarEvent {\n  id?: string;\n  title: string;\n  startDate: Date;\n  endDate: Date;\n  location?: string;\n  notes?: string;\n  attendees?: string[];\n  allDay?: boolean;\n}\n\nclass MockCalendarService {\n  private hasPermission = false;\n  private mockEvents: CalendarEvent[] = [\n    {\n      id: '1',\n      title: 'Team Meeting',\n      startDate: new Date(Date.now() + 3600000), // 1 hour from now\n      endDate: new Date(Date.now() + 7200000), // 2 hours from now\n      location: 'Conference Room A',\n      notes: 'Weekly team sync'\n    },\n    {\n      id: '2',\n      title: 'Lunch with Sarah',\n      startDate: new Date(Date.now() + 14400000), // 4 hours from now\n      endDate: new Date(Date.now() + 18000000), // 5 hours from now\n      location: 'Downtown Cafe'\n    }\n  ];\n  \n  async initialize(): Promise<boolean> {\n    // Mock permission request\n    this.hasPermission = true;\n    return true;\n  }\n  \n  async createEvent(event: CalendarEvent): Promise<string> {\n    if (!this.hasPermission) {\n      throw new Error('Calendar permissions not granted');\n    }\n    \n    const newEvent = {\n      ...event,\n      id: `event_${Date.now()}`\n    };\n    \n    this.mockEvents.push(newEvent);\n    return newEvent.id!;\n  }\n  \n  async getEvents(startDate: Date, endDate: Date): Promise<CalendarEvent[]> {\n    if (!this.hasPermission) {\n      throw new Error('Calendar permissions not granted');\n    }\n    \n    return this.mockEvents.filter(event => \n      event.startDate >= startDate && event.endDate <= endDate\n    );\n  }\n  \n  async getTodayEvents(): Promise<CalendarEvent[]> {\n    const today = new Date();\n    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n    const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n    \n    return this.getEvents(startOfDay, endOfDay);\n  }\n  \n  async updateEvent(eventId: string, updates: Partial<CalendarEvent>): Promise<boolean> {\n    if (!this.hasPermission) {\n      throw new Error('Calendar permissions not granted');\n    }\n    \n    const eventIndex = this.mockEvents.findIndex(event => event.id === eventId);\n    if (eventIndex === -1) {\n      return false;\n    }\n    \n    this.mockEvents[eventIndex] = { ...this.mockEvents[eventIndex], ...updates };\n    return true;\n  }\n  \n  async deleteEvent(eventId: string): Promise<boolean> {\n    if (!this.hasPermission) {\n      throw new Error('Calendar permissions not granted');\n    }\n    \n    const eventIndex = this.mockEvents.findIndex(event => event.id === eventId);\n    if (eventIndex === -1) {\n      return false;\n    }\n    \n    this.mockEvents.splice(eventIndex, 1);\n    return true;\n  }\n}\n\nexport const calendar = new MockCalendarService();\nexport default calendar;\n"