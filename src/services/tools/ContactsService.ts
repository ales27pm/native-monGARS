// Mock Contacts Service for template environment\n// In production, this would use the actual native module\n\ninterface Contact {\n  id?: string;\n  firstName?: string;\n  lastName?: string;\n  phoneNumbers?: Array<{\n    label?: string;\n    number?: string;\n  }>;\n  emails?: Array<{\n    label?: string;\n    email?: string;\n  }>;\n  company?: string;\n  note?: string;\n}\n\nclass MockContactsService {\n  private hasPermission = false;\n  private mockContacts: Contact[] = [\n    {\n      id: '1',\n      firstName: 'John',\n      lastName: 'Doe',\n      phoneNumbers: [{ label: 'mobile', number: '+1-555-0123' }],\n      emails: [{ label: 'work', email: 'john.doe@company.com' }],\n      company: 'Tech Corp'\n    },\n    {\n      id: '2',\n      firstName: 'Sarah',\n      lastName: 'Smith',\n      phoneNumbers: [{ label: 'mobile', number: '+1-555-0456' }],\n      emails: [{ label: 'personal', email: 'sarah.smith@email.com' }],\n      company: 'Design Studio'\n    },\n    {\n      id: '3',\n      firstName: 'Mike',\n      lastName: 'Johnson',\n      phoneNumbers: [{ label: 'work', number: '+1-555-0789' }],\n      emails: [{ label: 'work', email: 'mike.johnson@business.com' }],\n      company: 'Business Solutions'\n    }\n  ];\n  \n  async initialize(): Promise<boolean> {\n    // Mock permission request\n    this.hasPermission = true;\n    return true;\n  }\n  \n  async getContacts(): Promise<Contact[]> {\n    if (!this.hasPermission) {\n      throw new Error('Contacts permissions not granted');\n    }\n    \n    return this.mockContacts;\n  }\n  \n  async getContact(contactId: string): Promise<Contact | null> {\n    if (!this.hasPermission) {\n      throw new Error('Contacts permissions not granted');\n    }\n    \n    return this.mockContacts.find(contact => contact.id === contactId) || null;\n  }\n  \n  async createContact(contact: Contact): Promise<string> {\n    if (!this.hasPermission) {\n      throw new Error('Contacts permissions not granted');\n    }\n    \n    const newContact = {\n      ...contact,\n      id: `contact_${Date.now()}`\n    };\n    \n    this.mockContacts.push(newContact);\n    return newContact.id!;\n  }\n  \n  async updateContact(contactId: string, updates: Partial<Contact>): Promise<boolean> {\n    if (!this.hasPermission) {\n      throw new Error('Contacts permissions not granted');\n    }\n    \n    const contactIndex = this.mockContacts.findIndex(contact => contact.id === contactId);\n    if (contactIndex === -1) {\n      return false;\n    }\n    \n    this.mockContacts[contactIndex] = { ...this.mockContacts[contactIndex], ...updates };\n    return true;\n  }\n  \n  async deleteContact(contactId: string): Promise<boolean> {\n    if (!this.hasPermission) {\n      throw new Error('Contacts permissions not granted');\n    }\n    \n    const contactIndex = this.mockContacts.findIndex(contact => contact.id === contactId);\n    if (contactIndex === -1) {\n      return false;\n    }\n    \n    this.mockContacts.splice(contactIndex, 1);\n    return true;\n  }\n  \n  async searchContacts(query: string): Promise<Contact[]> {\n    if (!this.hasPermission) {\n      throw new Error('Contacts permissions not granted');\n    }\n    \n    const lowercaseQuery = query.toLowerCase();\n    \n    return this.mockContacts.filter(contact => {\n      const firstName = contact.firstName?.toLowerCase() || '';\n      const lastName = contact.lastName?.toLowerCase() || '';\n      const company = contact.company?.toLowerCase() || '';\n      const fullName = `${firstName} ${lastName}`.trim();\n      \n      return firstName.includes(lowercaseQuery) ||\n             lastName.includes(lowercaseQuery) ||\n             fullName.includes(lowercaseQuery) ||\n             company.includes(lowercaseQuery) ||\n             contact.phoneNumbers?.some(phone => \n               phone.number?.includes(query)\n             ) ||\n             contact.emails?.some(email => \n               email.email?.toLowerCase().includes(lowercaseQuery)\n             );\n    });\n  }\n}\n\nexport const contacts = new MockContactsService();\nexport default contacts;\n"