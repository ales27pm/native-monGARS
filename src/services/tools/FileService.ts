// Mock File Service for template environment\n// In production, this would use the actual native module\n\ninterface FileInfo {\n  uri: string;\n  name: string;\n  size: number;\n  type: string;\n  lastModified: number;\n}\n\nclass MockFileService {\n  private mockFiles: FileInfo[] = [\n    {\n      uri: '/documents/notes.txt',\n      name: 'notes.txt',\n      size: 1024,\n      type: 'text/plain',\n      lastModified: Date.now() - 86400000 // 1 day ago\n    },\n    {\n      uri: '/documents/presentation.pdf',\n      name: 'presentation.pdf',\n      size: 2048000,\n      type: 'application/pdf',\n      lastModified: Date.now() - 172800000 // 2 days ago\n    },\n    {\n      uri: '/documents/image.jpg',\n      name: 'image.jpg',\n      size: 512000,\n      type: 'image/jpeg',\n      lastModified: Date.now() - 259200000 // 3 days ago\n    }\n  ];\n  \n  async initialize(): Promise<boolean> {\n    return true;\n  }\n  \n  async readFile(path: string): Promise<string> {\n    // Mock file content\n    if (path.includes('notes.txt')) {\n      return 'This is a sample text file with some notes about the project.';\n    }\n    return 'Mock file content for: ' + path;\n  }\n  \n  async writeFile(path: string, content: string): Promise<boolean> {\n    const fileName = path.split('/').pop() || 'unknown';\n    const newFile: FileInfo = {\n      uri: path,\n      name: fileName,\n      size: content.length,\n      type: this.getFileType(fileName),\n      lastModified: Date.now()\n    };\n    \n    const existingIndex = this.mockFiles.findIndex(file => file.uri === path);\n    if (existingIndex >= 0) {\n      this.mockFiles[existingIndex] = newFile;\n    } else {\n      this.mockFiles.push(newFile);\n    }\n    \n    return true;\n  }\n  \n  async deleteFile(path: string): Promise<boolean> {\n    const fileIndex = this.mockFiles.findIndex(file => file.uri === path);\n    if (fileIndex >= 0) {\n      this.mockFiles.splice(fileIndex, 1);\n      return true;\n    }\n    return false;\n  }\n  \n  async listFiles(directory: string): Promise<FileInfo[]> {\n    return this.mockFiles.filter(file => file.uri.startsWith(directory));\n  }\n  \n  async createDirectory(path: string): Promise<boolean> {\n    // Mock directory creation\n    return true;\n  }\n  \n  async getFileInfo(path: string): Promise<FileInfo | null> {\n    return this.mockFiles.find(file => file.uri === path) || null;\n  }\n  \n  async copyFile(source: string, destination: string): Promise<boolean> {\n    const sourceFile = this.mockFiles.find(file => file.uri === source);\n    if (!sourceFile) {\n      return false;\n    }\n    \n    const fileName = destination.split('/').pop() || 'copy';\n    const copiedFile: FileInfo = {\n      ...sourceFile,\n      uri: destination,\n      name: fileName,\n      lastModified: Date.now()\n    };\n    \n    this.mockFiles.push(copiedFile);\n    return true;\n  }\n  \n  async moveFile(source: string, destination: string): Promise<boolean> {\n    const fileIndex = this.mockFiles.findIndex(file => file.uri === source);\n    if (fileIndex < 0) {\n      return false;\n    }\n    \n    const fileName = destination.split('/').pop() || 'moved';\n    this.mockFiles[fileIndex] = {\n      ...this.mockFiles[fileIndex],\n      uri: destination,\n      name: fileName,\n      lastModified: Date.now()\n    };\n    \n    return true;\n  }\n  \n  getDocumentDirectory(): string {\n    return '/documents';\n  }\n  \n  getCacheDirectory(): string {\n    return '/cache';\n  }\n  \n  private getFileType(fileName: string): string {\n    const extension = fileName.split('.').pop()?.toLowerCase();\n    \n    switch (extension) {\n      case 'pdf':\n        return 'application/pdf';\n      case 'txt':\n        return 'text/plain';\n      case 'jpg':\n      case 'jpeg':\n        return 'image/jpeg';\n      case 'png':\n        return 'image/png';\n      case 'mp4':\n        return 'video/mp4';\n      case 'mp3':\n        return 'audio/mpeg';\n      default:\n        return 'application/octet-stream';\n    }\n  }\n}\n\nexport const fileService = new MockFileService();\nexport default fileService;\n"